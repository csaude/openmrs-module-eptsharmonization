${project.parent.artifactId}.title=Epts Metadata Harmonization Module
${project.parent.artifactId}.harmonize.encountertype=Harmonize Encounter Types
${project.parent.artifactId}.encountertype.harmonize=Encounter Types Harmonize
${project.parent.artifactId}.encountertype.harmonize.onlyOnMDServer=New Encounter Types From Metadata Server (not in production server)
${project.parent.artifactId}.encountertype.harmonize.onlyOnPServer=New Encounter Types From Production Server (not in metadata Server)
${project.parent.artifactId}.encountertype.harmonize.onlyOnPServer.unused=New Unused Encounter Types From Production Server (not in metadata Server)
${project.parent.artifactId}.encountertype.harmonize.onlyOnPServer.inuse=New Encounter Types From Production Server in Use (not in metadata Server)
${project.parent.artifactId}.encountertype.harmonize.mdserver.with.differentID.andEqualUUID=Encounter Types From Metadata Server With Different IDs and Same UUIDs To Production Server
${project.parent.artifactId}.encountertype.harmonize.pdserver.with.differentID.andEqualUUID=Encounter Types From Production Server With Different IDs and Same UUIDs To Metadata Server
${project.parent.artifactId}.encountertype.harmonize.differentID.andEqualUUID=Encounter Types With Same UUIDs and Different IDs
${project.parent.artifactId}.encountertype.harmonize.differentNamesAndSameUUIDAndID=Encounter Types With Different Name and Same UUID and ID 
${project.parent.artifactId}.encountertype.btn.harmonizeNewFromMDS=Harmonize
${project.parent.artifactId}.encountertype.harmonize.mdserver=Encounter Types From Metadata Server
${project.parent.artifactId}.encountertype.harmonize.pdserver=Encounter Types From Production Server
${project.parent.artifactId}.encountertype.btn.exportNewFromPDS=Export
${project.parent.artifactId}.encountertype.btn.removeNewFromPDS=Delete
${project.parent.artifactId}.encountertype.harmonize.encounters=Affected Encounters
${project.parent.artifactId}.encountertype.harmonize.forms=Affected Forms
${project.parent.artifactId}.encountertype.mdserver.id=Id From Metadata Server
${project.parent.artifactId}.encountertype.mdserver.name=Name From Metadata Server
${project.parent.artifactId}.encountertype.mdserver.description=Description From Metadata Server 
${project.parent.artifactId}.encountertype.pdserver.id=Id From Production Server 
${project.parent.artifactId}.encountertype.pdserver.name=Name From Production Server
${project.parent.artifactId}.encountertype.pdserver.description=Description From Production Server
${project.parent.artifactId}.encountertype.harmonized=Encounter Type(s) successfully harmonized
${project.parent.artifactId}.encountertype.removed=Encounter Type(s) successfully removed
${project.parent.artifactId}.encountertype.harmonized.viewLog=View log file
${project.parent.artifactId}.harmonize.personattributetypes=Harmonize Person Attribute Types
${project.parent.artifactId}.personattributetype.harmonize=Person Attribute Types Harmonize
${project.parent.artifactId}.personattributetype.harmonize.onlyOnMDServer=New Person Attribute Types From Metadata Server (not in production server)
${project.parent.artifactId}.personattributetype.harmonize.onlyOnPServer=New Person Attribute Types From Production Server (not in metadata Server)
${project.parent.artifactId}.personattributetype.harmonize.onlyOnPServer.unused=New Unused Person Attribute Types From Production Server (not in metadata Server)
${project.parent.artifactId}.personattributetype.harmonize.onlyOnPServer.inuse=New Person Attribute Types From Production Server in Use (not in metadata Server)
${project.parent.artifactId}.personattributetype.harmonize.mdserver.with.differentID.andEqualUUID=Person Attribute Types From Metadata Server With Different IDs and Same UUIDs To Production Server
${project.parent.artifactId}.personattributetype.harmonize.pdserver.with.differentID.andEqualUUID=Person Attribute Types From Production Server With Different IDs and Same UUIDs To Metadata Server
${project.parent.artifactId}.personattributetype.harmonize.differentID.andEqualUUID=Person Attribute Types With Same UUIDs and Different IDs
${project.parent.artifactId}.personattributetype.harmonize.mdserver=Person Attribute Types From Metadata Server
${project.parent.artifactId}.personattributetype.harmonize.pdserver=Person Attribute Types From Production Server
${project.parent.artifactId}.personattributetype.harmonize.personattributes=Person Attributes (number of records affected)
${project.parent.artifactId}.selectAtLeastOneRowToProceed=Select at least one row to proceed
${project.parent.artifactId}.personattributetype.harmonize.differentNamesAndSameUUIDAndID=Person Attribute Types With Different Name and Same UUID and ID
${project.parent.artifactId}.personattributetype.harmonized=Person Attribute Type(s) successfully harmonized
${project.parent.artifactId}.summay.of.already.harmonized.mapping=Harmonized scenarios
${project.parent.artifactId}.encounterType.defineNewMappings=Define new Encounter Type Mapping
${project.parent.artifactId}.encounterType.from.metadataServer=Encounter Types From Metadata Server
${project.parent.artifactId}.encounterType.copiedFrom.metadataServer=Encounter Types Copied From Metadata Server
${project.parent.artifactId}.encounterType.created.OnProductionServer=Encounter Types Created in Production Server
${project.parent.artifactId}.error.encounterForMapping.required=Select Encounter Type for Mapping
${project.parent.artifactId}.encounterType.newDefinedMapping=New Defined Mappings
${project.parent.artifactId}.encounterType.harmonizationFinish=Encounter Types Harmonization Completed
${project.parent.artifactId}.summary.encountertype.harmonize.onlyOnPServer.unused=Deleted Unused Encounter Types From Production Server (not present in metadata Server) 
${project.parent.artifactId}.summary.encountertype.harmonize.onlyOnMDServer=Added new Encounter Types from Metadata Server (not in production server)
${project.parent.artifactId}.summary.encountertype.harmonize.differentNamesAndSameUUIDAndID=Updated Encounter Types With Different Name and Same UUID and ID 
${project.parent.artifactId}.summary.encountertype.harmonize.differentID.andEqualUUID=Updated Encounter Types With Same UUIDs and Different IDs
${project.parent.artifactId}.proceedHarmonization=Process Harmonization
${project.parent.artifactId}.proceed=Yes
${project.parent.artifactId}.notProceed=No
${project.parent.artifactId}.confirmAllHarmonization=Confirm Harmonization for all rows before you proceed
${project.parent.artifactId}.personattributetype.defineNewMappings=Define new Person Attribute Type Mapping
${project.parent.artifactId}.personattributetype.from.metadataServer=Person Attribute Types From Metadata Server
${project.parent.artifactId}.personattributetype.copiedFrom.metadataServer=Person Attribute Types Copied From Metadata Server
${project.parent.artifactId}.personattributetype.created.OnProductionServer=Person Attribute Types Created in Production Server
${project.parent.artifactId}.error.personAttributeTypeForMapping.required=Select Person Attribute Type for Mapping
${project.parent.artifactId}.personattributetype.harmonizationFinish=Person Attribute Types Harmonization Completed
${project.parent.artifactId}.summary.personattributetype.harmonize.onlyOnPServer.unused=Deleted Unused Person Attribute Types From Production Server (not present in metadata Server) 
${project.parent.artifactId}.summary.personattributetype.harmonize.onlyOnMDServer=Added new Person Attribute Types from Metadata Server (not in production server)
${project.parent.artifactId}.summary.personattributetype.harmonize.differentNamesAndSameUUIDAndID=Updated Person Attribute Types With Different Name and Same UUID and ID 
${project.parent.artifactId}.summary.personattributetype.harmonize.differentID.andEqualUUID=Updated Person Attribute Types With Same UUIDs and Different IDs
${project.parent.artifactId}.harmonize.programs=Harmonize Programs
${project.parent.artifactId}.program.harmonize=Programs Harmonize
${project.parent.artifactId}.program.harmonize.onlyOnMDServer=New Programs From Metadata Server (not in production server)
${project.parent.artifactId}.program.harmonize.onlyOnPServer=New Programs From Production Server (not in metadata Server)
${project.parent.artifactId}.program.harmonize.onlyOnPServer.unused=New Unused Programs From Production Server (not in metadata Server)
${project.parent.artifactId}.program.harmonize.onlyOnPServer.inuse=New Programs From Production Server in Use (not in metadata Server)
${project.parent.artifactId}.program.harmonize.mdserver.with.differentID.andEqualUUID=Programs From Metadata Server With Different IDs and Same UUIDs To Production Server
${project.parent.artifactId}.program.harmonize.pdserver.with.differentID.andEqualUUID=Programs From Production Server With Different IDs and Same UUIDs To Metadata Server
${project.parent.artifactId}.program.harmonize.differentID.andEqualUUID=Programs With Same UUIDs and Different IDs
${project.parent.artifactId}.program.harmonize.mdserver=Programs From Metadata Server
${project.parent.artifactId}.program.harmonize.pdserver=Programs From Production Server
${project.parent.artifactId}.program.harmonize.patientPrograms=Patient Programs (number of records affected)
${project.parent.artifactId}.program.harmonize.programWorkflows=Program Workflows (number of records affected)
${project.parent.artifactId}.program.harmonize.differentNamesAndSameUUIDAndID=Programs With Different Name and Same UUID and ID
${project.parent.artifactId}.program.harmonized=Program(s) successfully harmonized
${project.parent.artifactId}.program.defineNewMappings=Define new Program Mapping
${project.parent.artifactId}.program.from.metadataServer=Programs From Metadata Server
${project.parent.artifactId}.program.copiedFrom.metadataServer=Programs Copied From Metadata Server
${project.parent.artifactId}.program.created.OnProductionServer=Programs Created in Production Server
${project.parent.artifactId}.error.programForMapping.required=Select Program for Mapping
${project.parent.artifactId}.program.harmonizationFinish=Programs Harmonization Completed
${project.parent.artifactId}.summary.program.harmonize.onlyOnPServer.unused=Deleted Unused Programs From Production Server (not present in metadata Server) 
${project.parent.artifactId}.summary.program.harmonize.onlyOnMDServer=Added new Programs from Metadata Server (not in production server)
${project.parent.artifactId}.summary.program.harmonize.differentNamesAndSameUUIDAndID=Updated Programs With Different Name and Same UUID and ID 
${project.parent.artifactId}.summary.program.harmonize.differentID.andEqualUUID=Updated Programs With Same UUIDs and Different IDs
${project.parent.artifactId}.visittype.harmonize=Harmonize Visit Types
${project.parent.artifactId}.visittype.harmonize.missingInPDS=New Visit Types From Metadata Server (To be added)
${project.parent.artifactId}.visittype.harmonize.sameIdAndUuidDifferentNames=Visit Types With Same IDs & UUIDs But Different Names (Confirm to Overwrite)
${project.parent.artifactId}.visittype.harmonize.sameUuidDifferentIds=Visit Types With Same UUIDs But Different IDs (Confirm to Overwrite)
${project.parent.artifactId}.visittype.harmonize.notInMDSNotUsed=Existing Visit Types Not in Use and Not in MDS (To be removed)
${project.parent.artifactId}.visittype.harmonize.notInMDSWithVisits=Existing Visit Types In Use But Not in MDS (Map or Export for Review)
${project.parent.artifactId}.visittype.harmonize.onlyOnPServer.inuse=Visit Types From Production Server in Use (Not in metadata Server)
${project.parent.artifactId}.visittype.harmonize.affectedVisits=# of Visits
${project.parent.artifactId}.visittype.harmonize.actionForSimilarUuid=Overwrite
${project.parent.artifactId}.visittype.harmonize.newVisitTypeAdded=New Visit Types Added
${project.parent.artifactId}.visittype.harmonize.visitTypesDeleted=Unused Visit Types Deleted
${project.parent.artifactId}.visittype.harmonize.visitTypesUpdated=Same IDs & UUIDs Visit Types Updated
${project.parent.artifactId}.visittype.harmonize.visitTypeSameUuidUpdated=Same UUIDs Visit Types Updated
${project.parent.artifactId}.visittype.harmonize.ensureConfirmation=Please Confirm or Deny Every Overwrite
${project.parent.artifactId}.visittype.harmonize.proceed=Harmonize
${project.parent.artifactId}.visittype.defineNewMappings=Map The Site's Visit Types To Metadata Visit Types
${project.parent.artifactId}.visittype.harmonize.manualMappingDone=Site's Visit Types Mapped
${project.parent.artifactId}.visittype.from.metadataServer=Visit Types From Metadata Server
${project.parent.artifactId}.visittype.copiedFrom.metadataServer=Visit Types Copied From Metadata Server
${project.parent.artifactId}.visittype.created.OnProductionServer=Visit Types Created in Production Server
${project.parent.artifactId}.visittype.harmonized=Visit Types Successfully harmonized!
${project.parent.artifactId}.visittype.harmonizationFinish=Visit Types Harmonization Completed!
${project.parent.artifactId}.visittype.select=Select
${project.parent.artifactId}.error.visitTypeForMapping.required=Select Visit Type for Mapping
${project.parent.artifactId}.relationshiptype.harmonize=Harmonize Relationship Types
${project.parent.artifactId}.relationshiptype.harmonize.aIsToB=A to B
${project.parent.artifactId}.relationshiptype.harmonize.bIsToA=B to A
${project.parent.artifactId}.relationshiptype.harmonize.missingInPDS=New Relationship Types From Metadata Server (To be added)
${project.parent.artifactId}.relationshiptype.harmonize.sameIdAndUuidDifferentNames=Relationship Types With Same IDs & UUIDs But Different Names (Confirm to Overwrite)
${project.parent.artifactId}.relationshiptype.harmonize.sameUuidDifferentIds=Relationship Types With Same UUIDs But Different IDs (Confirm to Overwrite)
${project.parent.artifactId}.relationshiptype.harmonize.notInMDSNotUsed=Existing Relationship Types Not in Use and Not in MDS (To be removed)
${project.parent.artifactId}.relationshiptype.harmonize.notInMDSWithRelationships=Existing Relationship Types In Use But Not in MDS (Map or Export for Review)
${project.parent.artifactId}.relationshiptype.harmonize.onlyOnPServer.inuse=Relationship Types From Production Server in Use (Not in metadata Server)
${project.parent.artifactId}.relationshiptype.harmonize.affectedRelationships=# of Relationships
${project.parent.artifactId}.relationshiptype.harmonize.actionForSimilarUuid=Overwrite
${project.parent.artifactId}.relationshiptype.harmonize.newRelationshipTypeAdded=New Relationship Types Added
${project.parent.artifactId}.relationshiptype.harmonize.relationshipTypesDeleted=Unused Relationship Types Deleted
${project.parent.artifactId}.relationshiptype.harmonize.relationshipTypesUpdated=Same IDs & UUIDs Relationship Types Updated
${project.parent.artifactId}.relationshiptype.harmonize.relationshipTypeSameUuidUpdated=Same UUIDs Relationship Types Updated
${project.parent.artifactId}.relationshiptype.harmonize.ensureConfirmation=Please Confirm or Deny Every Overwrite
${project.parent.artifactId}.relationshiptype.harmonize.proceed=Harmonize
${project.parent.artifactId}.relationshiptype.defineNewMappings=Map The Site's Relationship Types To Metadata Relationship Types
${project.parent.artifactId}.relationshiptype.harmonize.manualMappingDone=Site's Relationship Types Mapped
${project.parent.artifactId}.relationshiptype.from.metadataServer=Relationship Types From Metadata Server
${project.parent.artifactId}.relationshiptype.created.OnProductionServer=Relationship Types Created in Production Server
${project.parent.artifactId}.relationshiptype.copiedFrom.metadataServer=Relationship Types Copied From Metadata Server
${project.parent.artifactId}.relationshiptype.harmonized=Relationship Types Successfully harmonized!
${project.parent.artifactId}.relationshiptype.harmonizationFinish=Relationship Types Harmonization Completed!
${project.parent.artifactId}.relationshiptype.select=Select
${project.parent.artifactId}.error.relationshipTypeForMapping.required=Select Relationship Type for Mapping
${project.parent.artifactId}.harmonize.programworkflows=Harmonize Program Workflows
${project.parent.artifactId}.programworkflow.harmonize=Program Workflows Harmonize
${project.parent.artifactId}.programworkflow.harmonize.onlyOnMDServer=New Program Workflows From Metadata Server (not in production server)
${project.parent.artifactId}.programworkflow.harmonize.onlyOnPServer=New Program Workflows From Production Server (not in metadata Server)
${project.parent.artifactId}.programworkflow.harmonize.onlyOnPServer.unused=New Unused Program Workflows From Production Server (not in metadata Server)
${project.parent.artifactId}.programworkflow.harmonize.onlyOnPServer.inuse=New Program Workflows From Production Server in Use (not in metadata Server)
${project.parent.artifactId}.programworkflow.harmonize.mdserver.with.differentID.andEqualUUID=Program Workflows From Metadata Server With Different IDs and Same UUIDs To Production Server
${project.parent.artifactId}.programworkflow.harmonize.pdserver.with.differentID.andEqualUUID=Program Workflows From Production Server With Different IDs and Same UUIDs To Metadata Server
${project.parent.artifactId}.programworkflow.harmonize.differentID.andEqualUUID=Program Workflows With Same UUIDs and Different IDs
${project.parent.artifactId}.programworkflow.harmonize.mdserver=Program Workflows From Metadata Server
${project.parent.artifactId}.programworkflow.harmonize.pdserver=Program Workflows From Production Server
${project.parent.artifactId}.programworkflow.harmonize.conceptStateConversions=Concept State Conversions (number of records affected)
${project.parent.artifactId}.programworkflow.harmonize.programWorkflowStates=Program Workflow States (number of records affected)
${project.parent.artifactId}.programworkflow.harmonize.differentProgramsOrConceptsAndSameUUIDAndID=Program Workflows With Different Programs or Concepts and Same UUID and ID
${project.parent.artifactId}.programworkflow.harmonized=Program Workflows successfully harmonized
${project.parent.artifactId}.programworkflow.defineNewMappings=Define new Program Workflow Mapping
${project.parent.artifactId}.programworkflow.from.metadataServer=Program Workflows From Metadata Server
${project.parent.artifactId}.programworkflow.copiedFrom.metadataServer=Program Workflows Copied From Metadata Server
${project.parent.artifactId}.programworkflow.created.OnProductionServer=Program Workflows Created in Production Server
${project.parent.artifactId}.error.programWorkflowForMapping.required=Select Program Workflow for Mapping
${project.parent.artifactId}.programworkflow.harmonizationFinish=Program Workflows Harmonization Completed
${project.parent.artifactId}.summary.programworkflow.harmonize.onlyOnPServer.unused=Deleted Unused Program Workflows From Production Server (not present in metadata Server) 
${project.parent.artifactId}.summary.programworkflow.harmonize.onlyOnMDServer=Added new Program Workflows from Metadata Server (not in production server)
${project.parent.artifactId}.summary.programworkflow.harmonize.differentProgramsOrConceptsAndSameUUIDAndID=Updated Program Workflows With Different Programs or Concepts and Same UUID and ID 
${project.parent.artifactId}.summary.programworkflow.harmonize.differentID.andEqualUUID=Updated Program Workflows With Same UUIDs and Different IDs
${project.parent.artifactId}.programworkflow.harmonize.program=Program
${project.parent.artifactId}.programworkflow.harmonize.concept=Concept
${project.parent.artifactId}.programworkflow.mdserver.program=Program From Metadata Server
${project.parent.artifactId}.programworkflow.mdserver.concept=Concept From Metadata Server
${project.parent.artifactId}.programworkflow.pdserver.program=Program From Production Server
${project.parent.artifactId}.programworkflow.pdserver.concept=Concept From Production Server
${project.parent.artifactId}.harmonizeBasedOnMDS=Harmonize Based On Metadata Server 
${project.parent.artifactId}.harmonizeWithinPDS=Harmonize Based On Production Server  
${project.parent.artifactId}.locationattributetype.harmonize=Harmonize Location Attribute Types
${project.parent.artifactId}.locationattributetype.harmonize.missingInPDS=New Location Attribute Types From Metadata Server (To be added)
${project.parent.artifactId}.locationattributetype.harmonize.sameIdAndUuidDifferentNames=Location Attribute Types With Same IDs & UUIDs But Different Names (Confirm to Overwrite)
${project.parent.artifactId}.locationattributetype.harmonize.sameUuidDifferentIds=Location Attribute Types With Same UUIDs But Different IDs (Confirm to Overwrite)
${project.parent.artifactId}.locationattributetype.harmonize.notInMDSNotUsed=Existing Location Attribute Types Not in Use and Not in MDS (To be removed)
${project.parent.artifactId}.locationattributetype.harmonize.notInMDSWithLocationAttributes=Existing Location Attribute Types In Use But Not in MDS (Map or Export for Review)
${project.parent.artifactId}.locationattributetype.harmonize.onlyOnPServer.inuse=Location Attribute Types From Production Server in Use (Not in metadata Server)
${project.parent.artifactId}.locationattributetype.harmonize.affectedLocationAttributes=# of Location Attributes
${project.parent.artifactId}.locationattributetype.harmonize.actionForSimilarUuid=Overwrite
${project.parent.artifactId}.locationattributetype.harmonize.newLocationAttributeTypeAdded=New Location Attribute Types Added
${project.parent.artifactId}.locationattributetype.harmonize.locationAttributeTypesDeleted=Unused Location Attribute Types Deleted
${project.parent.artifactId}.locationattributetype.harmonize.locationAttributeTypesUpdated=Same IDs & UUIDs Location Attribute Types Updated
${project.parent.artifactId}.locationattributetype.harmonize.locationAttributeTypeSameUuidUpdated=Same UUIDs Location Attribute Types Updated
${project.parent.artifactId}.locationattributetype.harmonize.ensureConfirmation=Please Confirm or Deny Every Overwrite
${project.parent.artifactId}.locationattributetype.harmonize.proceed=Harmonize
${project.parent.artifactId}.locationattributetype.defineNewMappings=Map The Site's Location Attribute Types To Metadata Location Attribute Types
${project.parent.artifactId}.locationattributetype.harmonize.manualMappingDone=Site's Location Attribute Types Mapped
${project.parent.artifactId}.locationattributetype.from.metadataServer=Location Attribute Types From Metadata Server
${project.parent.artifactId}.locationattributetype.copiedFrom.metadataServer=Location Attribute Types Copied From Metadata Server
${project.parent.artifactId}.locationattributetype.created.OnProductionServer=Location Attribute Types Created in Production Server
${project.parent.artifactId}.locationattributetype.harmonized=Location Attribute Types Successfully harmonized!
${project.parent.artifactId}.locationattributetype.harmonizationFinish=Location Attribute Types Harmonization Completed!
${project.parent.artifactId}.locationattributetype.select=Select
${project.parent.artifactId}.error.locationAttributeTypeForMapping.required=Select Location Attribute Type for Mapping
${project.parent.artifactId}.locationtag.harmonize=Harmonize Location Tags
${project.parent.artifactId}.locationtag.harmonize.missingInPDS=New Location Tags From Metadata Server (To be added)
${project.parent.artifactId}.locationtag.harmonize.sameIdAndUuidDifferentNames=Location Tags With Same IDs & UUIDs But Different Names (Confirm to Overwrite)
${project.parent.artifactId}.locationtag.harmonize.sameUuidDifferentIds=Location Tags With Same UUIDs But Different IDs (Confirm to Overwrite)
${project.parent.artifactId}.locationtag.harmonize.notInMDSNotUsed=Existing Location Tags Not in Use and Not in MDS (To be removed)
${project.parent.artifactId}.locationtag.harmonize.notInMDSWithLocations=Existing Location Tags In Use But Not in MDS (Map or Export for Review)
${project.parent.artifactId}.locationtag.harmonize.onlyOnPServer.inuse=Location Tags From Production Server in Use (Not in metadata Server)
${project.parent.artifactId}.locationtag.harmonize.affectedLocations=# of Locations
${project.parent.artifactId}.locationtag.harmonize.actionForSimilarUuid=Overwrite
${project.parent.artifactId}.locationtag.harmonize.newLocationTagAdded=New Location Tags Added
${project.parent.artifactId}.locationtag.harmonize.locationTagsDeleted=Unused Location Tags Deleted
${project.parent.artifactId}.locationtag.harmonize.locationTagsUpdated=Same IDs & UUIDs Location Tags Updated
${project.parent.artifactId}.locationtag.harmonize.locationTagSameUuidUpdated=Same UUIDs Location Tags Updated
${project.parent.artifactId}.locationtag.harmonize.ensureConfirmation=Please Confirm or Deny Every Overwrite
${project.parent.artifactId}.locationtag.harmonize.proceed=Harmonize
${project.parent.artifactId}.locationtag.defineNewMappings=Map The Site's Location Tags To Metadata Location Tags
${project.parent.artifactId}.locationtag.harmonize.manualMappingDone=Site's Location Tags Mapped
${project.parent.artifactId}.locationtag.from.metadataServer=Location Tags From Metadata Server
${project.parent.artifactId}.locationtag.created.OnProductionServer=Location Tags Created in Production Server
${project.parent.artifactId}.locationtag.copiedFrom.metadataServer=Location Tags Copied From Metadata Server
${project.parent.artifactId}.locationtag.harmonized=Location Tags Successfully harmonized!
${project.parent.artifactId}.locationtag.harmonizationFinish=Location Tags Harmonization Completed!
${project.parent.artifactId}.locationtag.select=Select
${project.parent.artifactId}.error.locationTagForMapping.required=Select Location Tag for Mapping
${project.parent.artifactId}.concept.harmonize.status=Concepts Harmonization Status
${project.parent.artifactId}.concept.harmonize.missingInMDS=Concepts Missing in MDS
${project.parent.artifactId}.concept.harmonize.hasMissingInMDS=Some concepts are not in metadata package (Export for analysis)
${project.parent.artifactId}.concept.harmonize.hasMissingInPDS=Some concepts from metadata are not available yet (Need to update)
${project.parent.artifactId}.concept.harmonize.noMissingInBothPDSAndMDS=Great! Concepts are in harmony!


${project.parent.artifactId}.harmonize.form=Harmonize Forms
${project.parent.artifactId}.form.harmonize=Form Harmonize
${project.parent.artifactId}.form.harmonize.onlyOnMDServer=New Form From Metadata Server (not in production server)
${project.parent.artifactId}.form.harmonize.onlyOnPServer=New Form from Production Server (not in metadata Server)
${project.parent.artifactId}.form.harmonize.onlyOnPServer.unused=New Unused Form from Production Server (not in metadata Server)
${project.parent.artifactId}.form.harmonize.onlyOnPServer.inuse=New Form from Production Server in Use (not in metadata Server)
${project.parent.artifactId}.form.harmonize.mdserver.with.differentID.andEqualUUID=Form from Metadata Server With Different IDs and Same UUIDs To Production Server
${project.parent.artifactId}.form.harmonize.pdserver.with.differentID.andEqualUUID=Form from Production Server With Different IDs and Same UUIDs To Metadata Server
${project.parent.artifactId}.form.harmonize.differentID.andEqualUUID=Form With Same UUIDs and Different IDs
${project.parent.artifactId}.form.harmonize.differentNamesAndSameUUIDAndID=Form With Different Name and Same UUID and ID 
${project.parent.artifactId}.form.btn.harmonizeNewFromMDS=Harmonize
${project.parent.artifactId}.form.harmonize.mdserver=Form from Metadata Server
${project.parent.artifactId}.form.harmonize.pdserver=Form from Production Server
${project.parent.artifactId}.form.btn.exportNewFromPDS=Export
${project.parent.artifactId}.form.btn.removeNewFromPDS=Delete
${project.parent.artifactId}.form.harmonize.encounters=Affected Encounters
${project.parent.artifactId}.form.mdserver.id=Id From Metadata Server
${project.parent.artifactId}.form.mdserver.name=Name From Metadata Server
${project.parent.artifactId}.form.mdserver.description=Description From Metadata Server 
${project.parent.artifactId}.form.pdserver.id=Id From Production Server 
${project.parent.artifactId}.form.pdserver.name=Name From Production Server
${project.parent.artifactId}.form.pdserver.description=Description From Production Server
${project.parent.artifactId}.form.harmonized=Form(s) successfully harmonized
${project.parent.artifactId}.form.removed=Form(s) successfully removed
${project.parent.artifactId}.encountertype.id=Encounter Type Id
${project.parent.artifactId}.encountertype.name=Encounter Type Name
${project.parent.artifactId}.form.processAllHarmonizationOfEncounterBeforeYouProceed=You Need to Harmonize Encounter Type before you Proceed Harmonizing Forms
${project.parent.artifactId}.summary.form.harmonize.onlyOnPServer.unused=Deleted Unused Forms from Production Server (not present in metadata Server) 
${project.parent.artifactId}.summary.form.harmonize.onlyOnMDServer=Added new Forms from Metadata Server (not in production server)
${project.parent.artifactId}.summary.form.harmonize.differentNamesAndSameUUIDAndID=Updated Forms With Different Name and Same UUID and ID 
${project.parent.artifactId}.summary.form.harmonize.differentID.andEqualUUID=Updated Forms With Same UUIDs and Different IDs
${project.parent.artifactId}.summary.form.harmonize.htmlformStep1=Updated Html Forms from Metadata Server with Different Form Name and equal UUID To Production Server
${project.parent.artifactId}.summary.form.harmonize.htmlformStep2=Added New Html Forms from Metadata Server

${project.parent.artifactId}.form.defineNewMappings=Define new Form Mapping
${project.parent.artifactId}.form.from.metadataServer=Forms From Metadata Server
${project.parent.artifactId}.form.copiedFrom.metadataServer=Forms Copied From Metadata Server
${project.parent.artifactId}.form.created.OnProductionServer=Forms Created in Production Server
${project.parent.artifactId}.form.error.formForMapping.required=Select Form for Mapping
${project.parent.artifactId}.form.newDefinedMapping=New Defined Mappings
${project.parent.artifactId}.form.harmonizationFinish=Forms Harmonization Completed
${project.parent.artifactId}.form.withoutEncounterTypeReference=Metadata Server Forms With encounter Types References Not Present in Production Server
${project.parent.artifactId}.form.htmlform.differrentForm.equal.uuid=Html Forms from Metadata Server with Different Forms and Same UUIDs To Production Server
${project.parent.artifactId}.form.htmlform.new.fromMDS=New Html Forms from Metadata Server
${project.parent.artifactId}.form.htmlfom.mdsDetails=Details from Metadata Server
${project.parent.artifactId}.form.htmlfom.pdsDetails=Details from Production Server
${project.parent.artifactId}.form.htmlform.formName=Form Name
${project.parent.artifactId}.form.htmlform.mdsHtmlUUid=Html Form UUID
${project.parent.artifactId}.harmonize.programworkflowstates=Harmonize Program Workflow States
${project.parent.artifactId}.programworkflowstate.harmonize=Program Workflow States Harmonize
${project.parent.artifactId}.programworkflowstate.harmonize.onlyOnMDServer=New Program Workflow States From Metadata Server (not in production server)
${project.parent.artifactId}.programworkflowstate.harmonize.onlyOnPServer=New Program Workflow States From Production Server (not in metadata Server)
${project.parent.artifactId}.programworkflowstate.harmonize.onlyOnPServer.unused=New Unused Program Workflow States From Production Server (not in metadata Server)
${project.parent.artifactId}.programworkflowstate.harmonize.onlyOnPServer.inuse=New Program Workflow States From Production Server in Use (not in metadata Server)
${project.parent.artifactId}.programworkflowstate.harmonize.mdserver.with.differentID.andEqualUUID=Program Workflow States From Metadata Server With Different IDs and Same UUIDs To Production Server
${project.parent.artifactId}.programworkflowstate.harmonize.pdserver.with.differentID.andEqualUUID=Program Workflow States From Production Server With Different IDs and Same UUIDs To Metadata Server
${project.parent.artifactId}.programworkflowstate.harmonize.differentID.andEqualUUID=Program Workflow States With Same UUIDs and Different IDs
${project.parent.artifactId}.programworkflowstate.harmonize.mdserver=Program Workflow States From Metadata Server
${project.parent.artifactId}.programworkflowstate.harmonize.pdserver=Program Workflow States From Production Server
${project.parent.artifactId}.programworkflowstate.harmonize.conceptStateConversions=Concept State Conversions (number of records affected)
${project.parent.artifactId}.programworkflowstate.harmonize.patientStates=Patient States (number of records affected)
${project.parent.artifactId}.programworkflowstate.harmonize.differentProgramWorkflowsOrConceptsAndSameUUIDAndID=States With Different Program Workflows or Concepts and Same UUID and ID
${project.parent.artifactId}.programworkflowstate.harmonized=Program Workflow States successfully harmonized
${project.parent.artifactId}.programworkflowstate.defineNewMappings=Define new Program Workflow State Mapping
${project.parent.artifactId}.programworkflowstate.from.metadataServer=Program Workflow States From Metadata Server
${project.parent.artifactId}.programworkflowstate.copiedFrom.metadataServer=Program Workflow States Copied From Metadata Server
${project.parent.artifactId}.programworkflowstate.created.OnProductionServer=Program Workflow States Created in Production Server
${project.parent.artifactId}.error.programWorkflowStateForMapping.required=Select Program Workflow State for Mapping
${project.parent.artifactId}.programworkflowstate.harmonizationFinish=Program Workflow States Harmonization Completed
${project.parent.artifactId}.summary.programworkflowstate.harmonize.onlyOnPServer.unused=Deleted Unused Program Workflow States From Production Server (not present in metadata Server) 
${project.parent.artifactId}.summary.programworkflowstate.harmonize.onlyOnMDServer=Added new Program Workflow States from Metadata Server (not in production server)
${project.parent.artifactId}.summary.programworkflowstate.harmonize.differentProgramWorkflowsOrConceptsAndSameUUIDAndID=Updated States With Different Program Workflows or Concepts and Same UUID and ID 
${project.parent.artifactId}.summary.programworkflowstate.harmonize.differentID.andEqualUUID=Updated Program Workflow States With Same UUIDs and Different IDs
${project.parent.artifactId}.programworkflowstate.harmonize.program=Program
${project.parent.artifactId}.programworkflowstate.harmonize.flowConcept=Flow
${project.parent.artifactId}.programworkflowstate.harmonize.concept=State
${project.parent.artifactId}.programworkflowstate.mdserver.program=Program From Metadata Server
${project.parent.artifactId}.programworkflowstate.mdserver.flowConcept=Flow From Metadata Server
${project.parent.artifactId}.programworkflowstate.mdserver.concept=State From Metadata Server
${project.parent.artifactId}.programworkflowstate.pdserver.program=Program From Metadata Server
${project.parent.artifactId}.programworkflowstate.pdserver.flowConcept=Flow From Production Server
${project.parent.artifactId}.programworkflowstate.pdserver.concept=State From Production Server
${project.parent.artifactId}.harmonize.patientidentifiertypes=Harmonize Patient Identifier Types
${project.parent.artifactId}.patientidentifiertype.harmonize=Patient Identifier Types Harmonize
${project.parent.artifactId}.patientidentifiertype.harmonize.onlyOnMDServer=New Patient Identifier Types From Metadata Server (not in production server)
${project.parent.artifactId}.patientidentifiertype.harmonize.onlyOnPServer=New Patient Identifier Types From Production Server (not in metadata Server)
${project.parent.artifactId}.patientidentifiertype.harmonize.onlyOnPServer.unused=New Unused Patient Identifier Types From Production Server (not in metadata Server)
${project.parent.artifactId}.patientidentifiertype.harmonize.onlyOnPServer.inuse=New Patient Identifier Types From Production Server in Use (not in metadata Server)
${project.parent.artifactId}.patientidentifiertype.harmonize.mdserver.with.differentID.andEqualUUID=Patient Identifier Types From Metadata Server With Different IDs and Same UUIDs To Production Server
${project.parent.artifactId}.patientidentifiertype.harmonize.pdserver.with.differentID.andEqualUUID=Patient Identifier Types From Production Server With Different IDs and Same UUIDs To Metadata Server
${project.parent.artifactId}.patientidentifiertype.harmonize.differentID.andEqualUUID=Patient Identifier Types With Same UUIDs and Different IDs
${project.parent.artifactId}.patientidentifiertype.harmonize.mdserver=Patient Identifier Types From Metadata Server
${project.parent.artifactId}.patientidentifiertype.harmonize.pdserver=Patient Identifier Types From Production Server
${project.parent.artifactId}.patientidentifiertype.harmonize.patientidentifiers=Patient Identifiers (number of records affected)
${project.parent.artifactId}.patientidentifiertype.harmonize.differentNamesAndSameUUIDAndID=Patient Identifier Types With Different Names and Same UUID and ID
${project.parent.artifactId}.patientidentifiertype.harmonize.differentDetailsAndSameNamesUUIDAndID=Patient Identifier Types With Different Format, Check Digit or Required and Same Names, UUID and ID
${project.parent.artifactId}.patientidentifiertype.harmonized=Patient Identifier Types successfully harmonized
${project.parent.artifactId}.patientidentifiertype.defineNewMappings=Define new Patient Identifier Type Mapping
${project.parent.artifactId}.patientidentifiertype.copiedFrom.metadataServer=Patient Identifier Types Copied From Metadata Server
${project.parent.artifactId}.patientidentifiertype.from.metadataServer=Patient Identifier Types From Metadata Server
${project.parent.artifactId}.patientidentifiertype.created.OnProductionServer=Patient Identifier Types Created in Production Server
${project.parent.artifactId}.error.patientIdentifierTypeForMapping.required=Select Patient Identifier Type for Mapping
${project.parent.artifactId}.patientidentifiertype.harmonizationFinish=Patient Identifier Types Harmonization Completed
${project.parent.artifactId}.summary.patientidentifiertype.harmonize.onlyOnPServer.unused=Deleted Unused Patient Identifier Types From Production Server (not present in metadata Server) 
${project.parent.artifactId}.summary.patientidentifiertype.harmonize.onlyOnMDServer=Added new Patient Identifier Types from Metadata Server (not in production server)
${project.parent.artifactId}.summary.patientidentifiertype.harmonize.differentNamesAndSameUUIDAndID=Updated Patient Identifier Types With Different Names and Same UUID and ID
${project.parent.artifactId}.summary.patientidentifiertype.harmonize.differentDetailsAndSameNamesUUIDAndID=Updated Patient Identifier Types With Different Format, Check Digit or Required and Same Names, UUID and ID 
${project.parent.artifactId}.summary.patientidentifiertype.harmonize.differentID.andEqualUUID=Updated Patient Identifier Types With Same UUIDs and Different IDs
${project.parent.artifactId}.patientidentifiertype.format=Format
${project.parent.artifactId}.patientidentifiertype.checkdigit=Check Digit
${project.parent.artifactId}.patientidentifiertype.required=Required
${project.parent.artifactId}.patientidentifiertype.mdserver.format=Format From Metadata Server
${project.parent.artifactId}.patientidentifiertype.mdserver.checkdigit=Check Digit From Metadata Server
${project.parent.artifactId}.patientidentifiertype.mdserver.required=Required From Metadata Server
${project.parent.artifactId}.patientidentifiertype.pdserver.format=Format From Production Server
${project.parent.artifactId}.patientidentifiertype.pdserver.checkdigit=Check Digit From Production Server
${project.parent.artifactId}.patientidentifiertype.pdserver.required=Required From Production Server

${project.parent.artifactId}.harmonizationstatus.title=Metadata Harmonization Status
${project.parent.artifactId}.harmonizationstatus.metadatatype=Metadata Type Name
${project.parent.artifactId}.harmonizationstatus.status=Status
${project.parent.artifactId}.harmonizationstatus.harmonized=Harmonized
${project.parent.artifactId}.harmonizationstatus.pending.harmonization=Pending Harmonization
${project.parent.artifactId}.harmonizationstatus.encounterType=Encounter Types
${project.parent.artifactId}.harmonizationstatus.personAttributeType=Person Attribute Types
${project.parent.artifactId}.harmonizationstatus.program=Programs
${project.parent.artifactId}.harmonizationstatus.programWorkflow=Program Workflows
${project.parent.artifactId}.harmonizationstatus.programWorkflowState=Program Workflow States